import { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import { toast } from "react-toastify";

export interface IUser {
  id: string;
  name: string;
}

export const UserData = () => {
  const [userData, setUserData] = useState({
    id: null,
    email: null,
    token: "",
  });
  const navigate = useNavigate();
  const [qrCode, setQrCode] = useState<string | null>(null);
  const [twoFaCode, setTwoFaCode] = useState("");

  const logout = () => {
    localStorage.setItem("userData", "");
    return navigate(`/login`);
  };

  const handleGetQR = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {
    e.preventDefault();

    fetch(`http://127.0.0.1:3000/getTwoFAQrCode`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `${userData.token}`,
      },
    })
      .then(async (data) => {
        if (!data.ok) throw data;
        const jsonData = await data.json();
        setQrCode(jsonData.image);
      })
      .catch((err) => {
        console.error(err);
        toast.error(err.statusText);
      });
  };

  const handleSubmit = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {
    e.preventDefault();
    fetch(`http://127.0.0.1:3000/registerTwoFA`, {
      method: "POST",
      body: JSON.stringify({
        code: twoFaCode,
      }),
      headers: {
        "Content-Type": "application/json",
        Authorization: `${userData.token}`,
      },
    })
      .then(async (data) => {
        if (!data.ok) throw data;
        localStorage.setItem(
          "userData",
          JSON.stringify({
            ...userData,
            is2FAon: true,
          })
        );
        setQrCode(null);
      })
      .catch((err) => {
        console.error(err);
        toast.error(err.statusText);
      });
  };

  useEffect(() => {
    setUserData(
      JSON.parse(localStorage.getItem("userData") || "{}") || {
        id: null,
        email: null,
        token: "",
      }
    );
  }, []);

  return (
    <main className="flex flex-wrap h-[100vh] bg-mainBg">
      <div className="w-1/2 flex-col m-auto flex justify-center items-center text-default-color">
        <section className="w-full m-auto flex justify-center items-center text-default-color">
          <article className="flex flex-col 2xl:w-1/2 w-3/4 ">
            <h1 className="text-3xl text-center">Dane u≈ºytkownika</h1>
            <p className="text-xl mt-5">Id: {userData?.id || "No Id"}</p>
            <p className="text-xl mt-5">
              Email: {userData?.email || "no name"}
            </p>
          </article>
        </section>
        <form
          action="#"
          className=" w-full mt-5  flex flex-col items-center justify-center"
        >
          {qrCode ? (
            <>
              <p className="mt-10 mb-5 text-xl text-center">
                Scan this qrCode with an app and pass code generated by the app
              </p>
              <img className="" src={qrCode} alt="qrCOde" />
              <input
                className="w-full mt-5"
                type="text"
                placeholder="2FA Code"
                value={twoFaCode}
                onChange={(e) => setTwoFaCode(e.target.value)}
              />
              <button
                onClick={(e) => handleSubmit(e)}
                className="w-full gradient-button"
              >
                Ustaw nowe 2FA
              </button>
            </>
          ) : (
            <>
              <button
                onClick={(e) => handleGetQR(e)}
                className="w-full gradient-button"
              >
                Ustaw 2FA
              </button>
              <button
                onClick={() => logout()}
                className="w-full button register-button mt-5"
              >
                Wyloguj
              </button>
            </>
          )}
        </form>
      </div>
    </main>
  );
};
